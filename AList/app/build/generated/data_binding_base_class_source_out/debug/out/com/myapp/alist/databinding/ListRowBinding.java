// Generated by view binder compiler. Do not edit!
package com.myapp.alist.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.myapp.alist.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ListRowBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView data1TextView;

  @NonNull
  public final TextView data2TextView;

  @NonNull
  public final TextView data3TextView;

  @NonNull
  public final TextView data4TextView;

  @NonNull
  public final TextView idTextView;

  @NonNull
  public final LinearLayout listItem1;

  private ListRowBinding(@NonNull LinearLayout rootView, @NonNull TextView data1TextView,
      @NonNull TextView data2TextView, @NonNull TextView data3TextView,
      @NonNull TextView data4TextView, @NonNull TextView idTextView,
      @NonNull LinearLayout listItem1) {
    this.rootView = rootView;
    this.data1TextView = data1TextView;
    this.data2TextView = data2TextView;
    this.data3TextView = data3TextView;
    this.data4TextView = data4TextView;
    this.idTextView = idTextView;
    this.listItem1 = listItem1;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ListRowBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ListRowBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.list_row, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ListRowBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.data1TextView;
      TextView data1TextView = ViewBindings.findChildViewById(rootView, id);
      if (data1TextView == null) {
        break missingId;
      }

      id = R.id.data2TextView;
      TextView data2TextView = ViewBindings.findChildViewById(rootView, id);
      if (data2TextView == null) {
        break missingId;
      }

      id = R.id.data3TextView;
      TextView data3TextView = ViewBindings.findChildViewById(rootView, id);
      if (data3TextView == null) {
        break missingId;
      }

      id = R.id.data4TextView;
      TextView data4TextView = ViewBindings.findChildViewById(rootView, id);
      if (data4TextView == null) {
        break missingId;
      }

      id = R.id.idTextView;
      TextView idTextView = ViewBindings.findChildViewById(rootView, id);
      if (idTextView == null) {
        break missingId;
      }

      LinearLayout listItem1 = (LinearLayout) rootView;

      return new ListRowBinding((LinearLayout) rootView, data1TextView, data2TextView,
          data3TextView, data4TextView, idTextView, listItem1);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
